package org.example.completionservice;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

public class CompletionServiceDemo2 {
  public static void main(String[] args) {
    List<Father> list = new ArrayList<>();
    Father month1 = new Father(10000, 10);
    Father month2 = new Father(20000, 15);
    Father month3 = new Father(30000, 20);

    list.add(month1);
    list.add(month2);
    list.add(month3);
    ExecutorService executorService = Executors.newSingleThreadExecutor();
    CompletionService<Double> completionService = new ExecutorCompletionService<>(executorService);

    Son son = new Son();
    double totalIncome = month1.getSalary() + month2.getSalary() + month3.getSalary();

    try {
      for (Father job : list) {
        Future<Double> task = new FutureTask<>(job, job.getSalary());
        executorService.submit(job);
        completionService.submit(() -> job.getSalary());
      }
      for (int i = 0; i < list.size(); i++) {
        Future<Double> future = completionService.take();
        son.consumer(future.get());
      }
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      executorService.shutdown();
    }
    System.out.println("Total income generated by the parents: $" + totalIncome);
    System.out.println("Total money consumed by the child: $" + son.getTotalExpenditure());
  }
}

class Father implements Runnable {
  private double salary;
  private final double sleepTime;

  public Father(double salary, double sleepTime) {
    this.salary = salary;
    this.sleepTime = sleepTime;
  }

  public double getSalary() {
    return salary;
  }

  @Override
  public void run() {
    try {
      Thread.sleep(1000);
      System.out.println("Father generated an income of $" + this.salary);
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    }
  }
}

class Son {
  private double totalExpenditure;

  protected double consumer(double money) {
    System.out.println("Son consumed $" + money);
    totalExpenditure += money;
    return totalExpenditure;
  }

  public double getTotalExpenditure() {
    return totalExpenditure;
  }
}
