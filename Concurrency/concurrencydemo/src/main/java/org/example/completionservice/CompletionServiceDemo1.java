package org.example.completionservice;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

public class CompletionServiceDemo1 {
  public static void main(String[] args) {
    List<Callable<Double>> jobs = new ArrayList<>();
    Parent month1 = new Parent(1000, 1000);
    Parent month2 = new Parent(2000, 2000);
    Parent month3 = new Parent(3000, 3000);
    Parent month4 = new Parent(4000, 4000);
    Parent month5 = new Parent(5000, 5000);

    jobs.addAll(List.of(month1, month2, month3, month4, month5));

    Child child = new Child();
    ExecutorService executor = Executors.newFixedThreadPool(5);
    CompletionService<Double> completionService = new ExecutorCompletionService<>(executor);

    double totalIncome =
        month1.getIncome()
            + month2.getIncome()
            + month3.getIncome()
            + month4.getIncome()
            + month5.getIncome();

    try {
      for (Callable<Double> job : jobs) {
        completionService.submit(job);
      }
      for (int i = 0; i < jobs.size(); i++) {
        Future<Double> future = completionService.take();
        child.consume(future.get());
      }
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      executor.shutdown();
    }
    System.out.println("Total income generated by the parents: $" + totalIncome);
    System.out.println("Total money consumed by the child: $" + child.getTotalConsumed());
  }
}

class Parent implements Callable<Double> {
  private final double income;
  private final int sleep;

  // Constructor
  public Parent(double income, int sleep) {
    this.income = income;
    this.sleep = sleep;
  }

  @Override
  public Double call() throws Exception {
    try {
      Thread.sleep(sleep);
      System.out.println("Parent has generated $" + this.income);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
    return this.income;
  }

  public double getIncome() {
    return income;
  }
}

class Child {
  private double totalConsumed;

  protected double consume(double money) {
    System.out.println("Child has consumed $" + money);
    totalConsumed += money;
    return totalConsumed;
  }

  public double getTotalConsumed() {
    return totalConsumed;
  }
}
